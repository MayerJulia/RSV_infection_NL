}
# Estimated params
estpars <- c("P", "M", "A", "W", "B") # parameters to estimate, can be modified
index <- which(names(theta) %in% estpars) # index of estimated params
# Priors
lower = c(P=0, M=0, A=0, W=0, B = 0)
upper = c(P=0.1, M=0.1, A=0.1, W = 0.1, B = 0.2)
prior <- createUniformPrior(lower=lower[estpars],
upper=upper[estpars])
# MCMC settings
nchains <- 2
cpus <- 1 # or 2 if you want parallel, but it does not seem to be faster?
mcmc_settings <- list(iterations = 2*80000,
nrChains = nchains)
sampler <- "Metropolis"
if (cpus == 1) {
bayesianSetup <- createBayesianSetup(prior = prior,
likelihood = loglik_wrapper,
names = names(theta[index]),
parallel = FALSE)
system.time({trace <- runMCMC(bayesianSetup = bayesianSetup,
sampler = sampler,
settings = mcmc_settings)})
}
plot(trace)
# burn-in
nburn <- 10000
plot(trace, parametersOnly = TRUE, start =nburn)
# burn-in
nburn <- 15000
plot(trace, parametersOnly = TRUE, start =nburn)
# burn-in
nburn <- 20000
plot(trace, parametersOnly = TRUE, start =nburn)
# check convergence and correlations
gelmanDiagnostics(trace, plot=TRUE, start=nburn)
correlationPlot(getSample(trace, parametersOnly = TRUE, coda=TRUE, start=nburn), density="smooth", thin=50)
marginalPlot(trace, prior=T, singlePanel=T, start=nburn, nDrawsPrior = 1000)
# remove burn-in for trajsim simulation
tracefinal <- getSample(trace, parametersOnly = TRUE, coda=TRUE, start=nburn)
plot(tracefinal)
rm(list=ls())
set.seed(42)
library(tidyverse)
rm(list=ls())
set.seed(42)
library(tidyverse)
library(BayesianTools)
library(binom)
library(plyr)
library(deSolve)
library(coda)
theme_set(theme_minimal())
data <- read.csv("https://raw.githubusercontent.com/Stijn-A/RSV_serology/master/data/infection_status_csv.txt",
sep=",")
# Group age into intervals
# bi-monthly for 0-2 years and 6-monthly for 2-5 years
data$agegrp <- cut(data$age_days,
breaks=c(seq(0,730, by=30.25*2),
seq(909,2000, by=30.25*6)),
include.lowest = T, right=F)
data <- data %>% dplyr::group_by(agegrp) %>%
dplyr::summarise(agemid=round(median(age_days)), # Age midpoint in age group
N=n(), # Total N in age group
nconv=sum(infection)) # n seroconverted in age group
# Calculate seroprevalence and binomial confidence intervals
data[,c("seroprev_mean","seroprev_low95","seroprev_up95")] <- binom.confint(data$nconv, data$N, method="exact")[,c("mean","lower","upper")]
# Plot
ggplot(data) +
geom_point(aes(x=agemid, y=seroprev_mean), color="black") +
geom_errorbar(aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95), colour="black") +
ylab("Proportion seroconverted") + xlab("age (days)")
model <- function(theta, age, inits) {
catalytic <- function(age, state, param) {
# FOI / seroconversion rate
lambda = param[["A"]] + age * 0 #constant FOI for now, change 0 to something else later
# states
S = exp(state[1]) # susceptible
Z = exp(state[2]) # seroconverted after infection
# changes in states
dS = - lambda*S
dZ = + lambda*S
return(list(c(dS/S, dZ/Z), lambda=lambda))
}
traj <- data.frame(ode(y=c(S=log(inits[["S"]]),
Z=log(inits[["Z"]])),
times=age,
func=catalytic,
parms=theta, #what is theta? the set of parameters
method="lsoda",
verbose=F))
traj$conv <- exp(traj$Z) # cumulative seroconversion (=observed state)
traj$inc <- c(inits[["Z"]], diff(exp(traj$Z))) # incident seroconversion
return(traj)
}
maketrajsim <- function(trace, theta, age, model, inits, ndraw) {
#Draw n fitted parameter vectors theta from the MCMC object
sample <- getSample(trace, parametersOnly = TRUE, thin=1, numSamples=ndraw) #trace is a sampler, parametersOnly = T means that likelihood, posterior and prior values are not provided in the output, thin = thinning parameter
traj.rep <- adply(.data=sample, .margins=1, .progress="text", .parallel=F, .fun=function(x) { #split sample by 1 = rows and apply function
#Define the theta as the estimated parameters from the current draw and the fixed parameters
theta.sample <- c(x, theta[!is.na(theta)])
#Simulate trajectory for selected theta
traj <- match.fun(model)(theta.sample, age, inits) #match.fun extracts the underlying function
traj <- cbind(as.data.frame(t(x)), traj)
})
colnames(traj.rep)[1] <- "replicate"
return(traj.rep)
}
# A = mean FOI (proportion infected per day)
theta <- c(A=0.02) # these are just random values, to be fitted
inits <- c(S=1-1e-12, Z=1e-12) # initial conditions for the states (as proportions)
#agepred <- seq(min(data$agemid), max(data$agemid), by=1) # if you want a higher resolution of the solution, but is computationally more expensive
agepred <- data$agemid
test <- model(theta, agepred, inits)
ggplot(test) + geom_line(aes(x=time, y=conv))
ggplot(test) + geom_line(aes(x=time, y=lambda)) #should be constant
loglik <- function(theta, age, data, model, inits) {
traj <- match.fun(model)(theta, age, inits)
nconv <- data$nconv[!is.na(data$nconv)] # n seroconverted at each age point  (data)
N <- data$N[!is.na(data$nconv)] # total N at each age point  (data)
prob <- traj$conv[traj$time %in% data$agemid] # proportion seroconverted at each age point (model output)
ll <- sum(dbinom(x=nconv,
size=N,
prob=prob,
log=TRUE), na.rm=TRUE)
return(ll)
}
# Test function
loglik(theta, agepred, data, model, inits)
# Wrapper for BT: loglik can only take the fitted parameters as argument
loglik_wrapper <- function(par) {
parX = theta
parX[index] = par
return(loglik(theta = parX,
age = agepred,
data = data,
model = match.fun(model),
inits = inits))
}
# Estimated params
estpars <- c("A") # parameters to estimate, can be modified
index <- which(names(theta) %in% estpars) # index of estimated params
# Priors
lower = c(A=0)
upper = c(A=0.1)
prior <- createUniformPrior(lower=lower[estpars],
upper=upper[estpars])
# MCMC settings
nchains <- 2
cpus <- 1 # or 2 if you want parallel, but it does not seem to be faster?
mcmc_settings <- list(iterations = 2*80000,
nrChains = nchains)
sampler <- "Metropolis"
if (cpus == 1) {
bayesianSetup <- createBayesianSetup(prior = prior,
likelihood = loglik_wrapper,
names = names(theta[index]),
parallel = FALSE)
system.time({trace <- runMCMC(bayesianSetup = bayesianSetup,
sampler = sampler,
settings = mcmc_settings)})
}
# DIAGNOSTICS -----------------------------------------------
summary(trace)
plot(trace)
rm(list=ls())
set.seed(42)
library(tidyverse)
set.seed(42)
library(tidyverse)
library(BayesianTools)
library(binom)
library(plyr)
library(deSolve)
library(coda)
theme_set(theme_minimal())
data <- read.csv("https://raw.githubusercontent.com/Stijn-A/RSV_serology/master/data/infection_status_csv.txt",
sep=",")
# Group age into intervals
# bi-monthly for 0-2 years and 6-monthly for 2-5 years
data$agegrp <- cut(data$age_days,
breaks=c(seq(0,730, by=30.25*2),
seq(909,2000, by=30.25*6)),
include.lowest = T, right=F)
data <- data %>% dplyr::group_by(agegrp) %>%
dplyr::summarise(agemid=round(median(age_days)), # Age midpoint in age group
N=n(), # Total N in age group
nconv=sum(infection)) # n seroconverted in age group
# Calculate seroprevalence and binomial confidence intervals
data[,c("seroprev_mean","seroprev_low95","seroprev_up95")] <- binom.confint(data$nconv, data$N, method="exact")[,c("mean","lower","upper")]
# Plot
ggplot(data) +
geom_point(aes(x=agemid, y=seroprev_mean), color="black") +
geom_errorbar(aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95), colour="black") +
ylab("Proportion seroconverted") + xlab("age (days)")
model <- function(theta, age, inits) {
catalytic <- function(age, state, param) {
# FOI / seroconversion rate
lambda = param[["A"]] + age * 0 #constant FOI for now, change 0 to something else later
w = param[["B"]] # waning maternal immunity
# states
M = exp(state[1]) # proportion with maternal immuniry
S = exp(state[2]) # susceptible
Z = exp(state[3]) # seroconverted after infection
# changes in states
dM = -w*M
dS = + w*M - lambda*S
dZ = + lambda*S
return(list(c(dM/M,dS/S, dZ/Z), lambda=lambda, w=w))
}
traj <- data.frame(ode(y=c(M=log(inits[["M"]]),
S=log(inits[["S"]]),
Z=log(inits[["Z"]])),
times=age,
func=catalytic,
parms=theta, #what is theta? the set of parameters
method="lsoda",
verbose=F))
traj$conv <- exp(traj$Z) # cumulative seroconversion (=observed state)
traj$inc <- c(inits[["Z"]], diff(exp(traj$Z))) # incident seroconversion
return(traj)
}
maketrajsim <- function(trace, theta, age, model, inits, ndraw) {
#Draw n fitted parameter vectors theta from the MCMC object
sample <- getSample(trace, parametersOnly = TRUE, thin=1, numSamples=ndraw) #trace is a sampler, parametersOnly = T means that likelihood, posterior and prior values are not provided in the output, thin = thinning parameter
traj.rep <- adply(.data=sample, .margins=1, .progress="text", .parallel=F, .fun=function(x) { #split sample by 1 = rows and apply function
#Define the theta as the estimated parameters from the current draw and the fixed parameters
theta.sample <- c(x, theta[!is.na(theta)])
#Simulate trajectory for selected theta
traj <- match.fun(model)(theta.sample, age, inits) #match.fun extracts the underlying function
traj <- cbind(as.data.frame(t(x)), traj)
})
colnames(traj.rep)[1] <- "replicate"
return(traj.rep)
}
# A = mean FOI (proportion infected per day)
# B = rate of waning maternal immunity
theta <- c(A=0.02, B = 0.01) # these are just random values, to be fitted
inits <- c(M=1-1e-12-1e-12, S=1e-12, Z=1e-12) # initial conditions for the states (as proportions)
# SIMULATION TIME  ---------------------------------------------------------
agepred <- data$agemid
test <- model(theta, agepred, inits)
ggplot(test) + geom_line(aes(x=time, y=conv))
ggplot(test) + geom_line(aes(x=time, y=lambda)) #should be constant
ggplot(test) + geom_line(aes(x=time, y=w))
loglik <- function(theta, age, data, model, inits) {
traj <- match.fun(model)(theta, age, inits)
nconv <- data$nconv[!is.na(data$nconv)] # n seroconverted at each age point  (data)
N <- data$N[!is.na(data$nconv)] # total N at each age point  (data)
prob <- traj$conv[traj$time %in% data$agemid] # proportion seroconverted at each age point (model output)
ll <- sum(dbinom(x=nconv,
size=N,
prob=prob,
log=TRUE), na.rm=TRUE)
return(ll)
}
# Test function
loglik(theta, agepred, data, model, inits)
# Wrapper for BT: loglik can only take the fitted parameters as argument
loglik_wrapper <- function(par) {
parX = theta
parX[index] = par
return(loglik(theta = parX,
age = agepred,
data = data,
model = match.fun(model),
inits = inits))
}
# Estimated params
estpars <- c("A", "B") # parameters to estimate, can be modified
index <- which(names(theta) %in% estpars) # index of estimated params
# Priors
lower = c(A=0, B = 0)
upper = c(A=0.1, B = 0.2)
prior <- createUniformPrior(lower=lower[estpars],
upper=upper[estpars])
# MCMC settings
nchains <- 2
cpus <- 1 # or 2 if you want parallel, but it does not seem to be faster?
mcmc_settings <- list(iterations = 2*80000,
nrChains = nchains)
sampler <- "DEzs"
if (cpus == 1) {
bayesianSetup <- createBayesianSetup(prior = prior,
likelihood = loglik_wrapper,
names = names(theta[index]),
parallel = FALSE)
system.time({trace <- runMCMC(bayesianSetup = bayesianSetup,
sampler = sampler,
settings = mcmc_settings)})
}
plot(trace)
# burn-in
nburn <- 10000
plot(trace, parametersOnly = TRUE, start =nburn)
# check convergence and correlations
gelmanDiagnostics(trace, plot=TRUE, start=nburn)
correlationPlot(getSample(trace, parametersOnly = TRUE, coda=TRUE, start=nburn), density="smooth", thin=50)
marginalPlot(trace, prior=T, singlePanel=T, start=nburn, nDrawsPrior = 1000)
# remove burn-in for trajsim simulation
tracefinal <- getSample(trace, parametersOnly = TRUE, coda=TRUE, start=nburn)
plot(tracefinal)
effectiveSize(tracefinal)
# Posterior summary
summary(tracefinal)
rm(list=ls())
set.seed(42)
library(tidyverse)
set.seed(42)
library(tidyverse)
library(BayesianTools)
library(binom)
library(plyr)
library(deSolve)
library(coda)
library(lubridate)
theme_set(theme_minimal())
data <- read.csv("https://raw.githubusercontent.com/Stijn-A/RSV_serology/master/data/infection_status_csv.txt",
sep=",")
# Group age into intervals
# bi-monthly for 0-2 years and 6-monthly for 2-5 years
data$agegrp <- cut(data$age_days,
breaks=c(seq(0,730, by=30.25*2),
seq(909,2000, by=30.25*6)),
include.lowest = T, right=F)
# Divide by season of birth
spring <- c(3, 4, 5)
summer <- c(6, 7, 8)
autumn <- c (9, 10, 11)
winter <- c(1, 2, 12)
data <- data %>%
mutate(
Birth_mo = birthday %>% month()
)%>%
mutate(
season_birth = case_when(
Birth_mo %in% spring ~ "Spring",
Birth_mo %in% summer ~ "Summer",
Birth_mo %in% autumn ~ "Autumn",
Birth_mo %in% winter ~ "Winter")
) %>%
mutate(
visitnursery_child = case_when(
visitnursery_child == 0 ~ FALSE,
visitnursery_child == 1 ~ TRUE
)
)
data_no_season <- data %>% dplyr::group_by(agegrp) %>%
dplyr::summarise(agemid=round(median(age_days)), # Age midpoint in age group
N=n(), # Total N in age group
nconv=sum(infection))
data_no_season[,c("seroprev_mean","seroprev_low95","seroprev_up95")] <- binom.confint(data_no_season$nconv, data_no_season$N, method="exact")[,c("mean","lower","upper")]
ggplot(data_no_season) +
geom_point(aes(x=agemid, y=seroprev_mean)) +
geom_errorbar(aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95)) +
ylab("Proportion seroconverted") + xlab("age (days)")
ggplot(data_no_season) +
geom_point(aes(x=agemid, y=seroprev_mean)) +
geom_errorbar(aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95)) +
ylab("Proportion seroconverted") + xlab("age (days)") +
scale_x_continuous(breaks=c(0,365,730,1095,1460,1825))
ggplot(data_no_season) +
geom_point(aes(x=agemid, y=seroprev_mean)) +
geom_errorbar(aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95)) +
ylab("Proportion seroconverted") + xlab("age (years)") +
scale_x_continuous(breaks=c(0,365,730,1095,1460,1825), labels = c(0, 1, 2, 3, 4 ,5))
getwd()
setwd("LSHTM/Project/RSV_infection_NL/CSV files")
trajsim2 <- read.csv("Daycare with addition/Updating contacts every 6 months/add_DEzs_trajsim_ll.csv")
trajquantiles <- plyr::ddply(.data=trajsim2, .variables="time", function(x) quantile(x[,"conv"], prob = c(0.025, 0.5, 0.975), na.rm=T))
colnames(trajquantiles) <- c("agemid", "low95", "median", "up95")
trajquantiles_sp <- plyr::ddply(.data=trajsim2, .variables="time", function(x) quantile(x[,"conv_spring"], prob = c(0.025, 0.5, 0.975), na.rm=T))
colnames(trajquantiles_sp) <- c("agemid", "low95", "median", "up95")
trajquantiles_sm <- plyr::ddply(.data=trajsim2, .variables="time", function(x) quantile(x[,"conv_summer"], prob = c(0.025, 0.5, 0.975), na.rm=T))
colnames(trajquantiles_sm) <- c("agemid", "low95", "median", "up95")
trajquantiles_au <- plyr::ddply(.data=trajsim2, .variables="time", function(x) quantile(x[,"conv_autumn"], prob = c(0.025, 0.5, 0.975), na.rm=T))
colnames(trajquantiles_au) <- c("agemid", "low95", "median", "up95")
trajquantiles_wt <- plyr::ddply(.data=trajsim2, .variables="time", function(x) quantile(x[,"conv_winter"], prob = c(0.025, 0.5, 0.975), na.rm=T))
colnames(trajquantiles_wt) <- c("agemid", "low95", "median", "up95")
fit <- ggplot() + theme_bw() + ggtitle("Model fit") +
geom_point(data=data_no_season, aes(x=agemid, y=seroprev_mean)) +
geom_linerange(data=data_no_season, aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95)) +
geom_ribbon(data=trajquantiles, aes(x=agemid, ymin=low95, ymax=up95), fill="red", alpha=0.3) +
geom_line(data=trajquantiles, aes(x=agemid, y=median), color="red") +
xlab("age (days)") + ylab("proportion seroconverted")
fit
fit <- ggplot() + theme_bw() + ggtitle("Model fit") +
geom_point(data=data_no_season, aes(x=agemid, y=seroprev_mean)) +
geom_linerange(data=data_no_season, aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95)) +
geom_ribbon(data=trajquantiles, aes(x=agemid, ymin=low95, ymax=up95), fill="red", alpha=0.3) +
geom_line(data=trajquantiles, aes(x=agemid, y=median), color="red") +
xlab("age (years)") + ylab("proportion seroconverted") +
scale_x_continuous(breaks=c(0,182.5, 365, 547.5, 730, 912.5, 1095, 1277.5, 1460, 1642.5, 1825),
labels = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5 ,5))
fit
fit <- ggplot() + theme_bw() + ggtitle("Overall model fit") +
geom_point(data=data_no_season, aes(x=agemid, y=seroprev_mean)) +
geom_linerange(data=data_no_season, aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95)) +
geom_ribbon(data=trajquantiles, aes(x=agemid, ymin=low95, ymax=up95), fill="red", alpha=0.3) +
geom_line(data=trajquantiles, aes(x=agemid, y=median), color="red") +
xlab("age (years)") + ylab("proportion seroconverted") +
scale_x_continuous(breaks=c(0,182.5, 365, 547.5, 730, 912.5, 1095, 1277.5, 1460, 1642.5, 1825),
labels = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5 ,5))
fit
#Plot by season
spring.df <- subset(data, season_birth == 'Spring')
summer.df <- subset(data, season_birth == 'Summer')
autumn.df <- subset(data, season_birth == 'Autumn')
winter.df <- subset(data, season_birth == 'Winter')
fit_sp <- ggplot() + theme_bw() + ggtitle("Model fit on spring birth cohort") +
geom_point(data=spring.df, aes(x=agemid, y=seroprev_mean, colour = factor(visitnursery_child))) +
geom_linerange(data=spring.df, aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95, colour = factor(visitnursery_child))) +
geom_ribbon(data=trajquantiles_sp, aes(x=agemid, ymin=low95, ymax=up95), fill="red", alpha=0.3) +
geom_line(data=trajquantiles_sp, aes(x=agemid, y=median), color="red") +
xlab("age (years)") + ylab("proportion seroconverted") + labs (colour = "Day-care attendance") +
scale_x_continuous(breaks=c(0,182.5, 365, 547.5, 730, 912.5, 1095, 1277.5, 1460, 1642.5, 1825),
labels = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5 ,5))
fit_sp
data_no_daycare <- data %>% dplyr::group_by(agegrp, season_birth) %>%
dplyr::summarise(agemid=round(median(age_days)), # Age midpoint in age group
N=n(), # Total N in age group
nconv=sum(infection)) # n seroconverted in age group
spring_no_daycare <- subset(data_no_daycare, season_birth == 'Spring')
summer_no_daycare <- subset(data_no_daycare, season_birth == 'Summer')
autumn_no_daycare <- subset(data_no_daycare, season_birth == 'Autumn')
winter_no_daycare <- subset(data_no_daycare, season_birth == 'Winter')
fit_sp2 <- ggplot() + theme_bw() + ggtitle("Model fit on spring birth cohort") +
geom_point(data=spring_no_daycare, aes(x=agemid, y=seroprev_mean)) +
geom_linerange(data=spring_no_daycare, aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95)) +
geom_ribbon(data=trajquantiles_sp, aes(x=agemid, ymin=low95, ymax=up95), fill="red", alpha=0.3) +
geom_line(data=trajquantiles_sp, aes(x=agemid, y=median), color="red") +
xlab("age (days)") + ylab("proportion seroconverted") +
scale_x_continuous(breaks=c(0,182.5, 365, 547.5, 730, 912.5, 1095, 1277.5, 1460, 1642.5, 1825),
labels = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5 ,5))
fit_sp2
data_no_daycare[,c("seroprev_mean","seroprev_low95","seroprev_up95")] <- binom.confint(data_no_daycare$nconv, data_no_daycare$N, method="exact")[,c("mean","lower","upper")]
spring_no_daycare <- subset(data_no_daycare, season_birth == 'Spring')
fit_sp2 <- ggplot() + theme_bw() + ggtitle("Model fit on spring birth cohort") +
geom_point(data=spring_no_daycare, aes(x=agemid, y=seroprev_mean)) +
geom_linerange(data=spring_no_daycare, aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95)) +
geom_ribbon(data=trajquantiles_sp, aes(x=agemid, ymin=low95, ymax=up95), fill="red", alpha=0.3) +
geom_line(data=trajquantiles_sp, aes(x=agemid, y=median), color="red") +
xlab("age (days)") + ylab("proportion seroconverted") +
scale_x_continuous(breaks=c(0,182.5, 365, 547.5, 730, 912.5, 1095, 1277.5, 1460, 1642.5, 1825),
labels = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5 ,5))
fit_sp2
summer_no_daycare <- subset(data_no_daycare, season_birth == 'Summer')
autumn_no_daycare <- subset(data_no_daycare, season_birth == 'Autumn')
winter_no_daycare <- subset(data_no_daycare, season_birth == 'Winter')
fit_sm2 <- ggplot() + theme_bw() + ggtitle("Model fit on summer birth cohort") +
geom_point(data=summer_no_daycare, aes(x=agemid, y=seroprev_mean)) +
geom_linerange(data=summer_no_daycare, aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95)) +
geom_ribbon(data=trajquantiles_sm, aes(x=agemid, ymin=low95, ymax=up95), fill="red", alpha=0.3) +
geom_line(data=trajquantiles_sm, aes(x=agemid, y=median), color="red") +
xlab("age (days)") + ylab("proportion seroconverted") +
scale_x_continuous(breaks=c(0,182.5, 365, 547.5, 730, 912.5, 1095, 1277.5, 1460, 1642.5, 1825),
labels = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5 ,5))
fit_sm2
fit_au2 <- ggplot() + theme_bw() + ggtitle("Model fit on autumn birth cohort") +
geom_point(data=autumn_no_daycare, aes(x=agemid, y=seroprev_mean)) +
geom_linerange(data=autumn_no_daycare, aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95)) +
geom_ribbon(data=trajquantiles_au, aes(x=agemid, ymin=low95, ymax=up95), fill="red", alpha=0.3) +
geom_line(data=trajquantiles_au, aes(x=agemid, y=median), color="red") +
xlab("age (days)") + ylab("proportion seroconverted") +
scale_x_continuous(breaks=c(0,182.5, 365, 547.5, 730, 912.5, 1095, 1277.5, 1460, 1642.5, 1825),
labels = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5 ,5))
fit_au2
fit_wt2 <- ggplot() + theme_bw() + ggtitle("Model fit on winter birth cohort") +
geom_point(data=winter_no_daycare, aes(x=agemid, y=seroprev_mean)) +
geom_linerange(data=winter_no_daycare, aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95)) +
geom_ribbon(data=trajquantiles_wt, aes(x=agemid, ymin=low95, ymax=up95), fill="red", alpha=0.3) +
geom_line(data=trajquantiles_wt, aes(x=agemid, y=median), color="red") +
xlab("age (days)") + ylab("proportion seroconverted") +
scale_x_continuous(breaks=c(0,182.5, 365, 547.5, 730, 912.5, 1095, 1277.5, 1460, 1642.5, 1825),
labels = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5 ,5))
fit_wt2
fit_wt2 <- ggplot() + theme_bw() + ggtitle("Model fit on winter birth cohort") +
geom_point(data=winter_no_daycare, aes(x=agemid, y=seroprev_mean)) +
geom_linerange(data=winter_no_daycare, aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95)) +
geom_ribbon(data=trajquantiles_wt, aes(x=agemid, ymin=low95, ymax=up95), fill="red", alpha=0.3) +
geom_line(data=trajquantiles_wt, aes(x=agemid, y=median), color="red") +
xlab("age (years)") + ylab("proportion seroconverted") +
scale_x_continuous(breaks=c(0,182.5, 365, 547.5, 730, 912.5, 1095, 1277.5, 1460, 1642.5, 1825),
labels = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5 ,5))
fit_wt2
fit_au2 <- ggplot() + theme_bw() + ggtitle("Model fit on autumn birth cohort") +
geom_point(data=autumn_no_daycare, aes(x=agemid, y=seroprev_mean)) +
geom_linerange(data=autumn_no_daycare, aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95)) +
geom_ribbon(data=trajquantiles_au, aes(x=agemid, ymin=low95, ymax=up95), fill="red", alpha=0.3) +
geom_line(data=trajquantiles_au, aes(x=agemid, y=median), color="red") +
xlab("age (years)") + ylab("proportion seroconverted") +
scale_x_continuous(breaks=c(0,182.5, 365, 547.5, 730, 912.5, 1095, 1277.5, 1460, 1642.5, 1825),
labels = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5 ,5))
fit_au2
fit_sm2 <- ggplot() + theme_bw() + ggtitle("Model fit on summer birth cohort") +
geom_point(data=summer_no_daycare, aes(x=agemid, y=seroprev_mean)) +
geom_linerange(data=summer_no_daycare, aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95)) +
geom_ribbon(data=trajquantiles_sm, aes(x=agemid, ymin=low95, ymax=up95), fill="red", alpha=0.3) +
geom_line(data=trajquantiles_sm, aes(x=agemid, y=median), color="red") +
xlab("age (years)") + ylab("proportion seroconverted") +
scale_x_continuous(breaks=c(0,182.5, 365, 547.5, 730, 912.5, 1095, 1277.5, 1460, 1642.5, 1825),
labels = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5 ,5))
fit_sm2
fit_sp2 <- ggplot() + theme_bw() + ggtitle("Model fit on spring birth cohort") +
geom_point(data=spring_no_daycare, aes(x=agemid, y=seroprev_mean)) +
geom_linerange(data=spring_no_daycare, aes(x=agemid, ymin=seroprev_low95, ymax=seroprev_up95)) +
geom_ribbon(data=trajquantiles_sp, aes(x=agemid, ymin=low95, ymax=up95), fill="red", alpha=0.3) +
geom_line(data=trajquantiles_sp, aes(x=agemid, y=median), color="red") +
xlab("age (years)") + ylab("proportion seroconverted") +
scale_x_continuous(breaks=c(0,182.5, 365, 547.5, 730, 912.5, 1095, 1277.5, 1460, 1642.5, 1825),
labels = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5 ,5))
fit_sp2
